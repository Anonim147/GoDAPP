package middleware

import (
	"crypto/md5"
	"database/sql"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"math/rand"
	"os"
	"regexp"
	"strconv"
	"strings"

	"GODAPP/models"

	"github.com/joho/godotenv"
	"github.com/lib/pq"
	_ "github.com/lib/pq" //TODO: change to another driver and use sqlx
)

func createConnection() (*sql.DB, error) {
	err := godotenv.Load(".env")
	if err != nil {
		return nil, err
	}

	db, err := sql.Open("postgres", os.Getenv("POSTGRES_URL"))

	if err != nil {
		return nil, err
	}

	return db, nil
}

func createTable(tableName string, db *sql.DB) error {
	query := `CREATE TABLE ` + tableName + ` (
		id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
		data jsonb NOT NULL,
		hash text
	)`
	_, err := db.Exec(query)
	if err != nil {
		return err
	}
	return nil
}

func getTableKeys(tableName string) ([]models.TableKey, error) {
	db, err := createConnection()
	if err != nil {
		return nil, err
	}
	defer db.Close()
	query := GetJSONKeysQuery(tableName)
	rows, err := db.Query(query)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	data := []models.TableKey{}
	for rows.Next() {
		var tk models.TableKey
		err = rows.Scan(&tk.KeyName, &tk.KeyType)
		if err != nil {
			return nil, err
		}
		data = append(data, tk)
	}
	return data, nil
}

func getSelectData(data models.SelectModel) string {
	db, err := createConnection()
	defer db.Close()
	query := GetSelectQuery(data, 0, 0)
	rows, err := db.Query(query)
	if err != nil {
		panic(err)
	}
	queryText := `{"data" :[`
	for rows.Next() {
		var data []byte
		err = rows.Scan(&data)
		if err != nil {
			panic(err)
		}
		queryText += string(data) + ","
	}
	queryText = queryText[:len(queryText)-1] + "]}"
	return queryText
}

func getPagedSelectData(data models.SelectModel, host string, limit int, offset int) string {
	fmt.Printf("limit %s \n", limit)
	fmt.Printf("limit %s \n", offset)
	db, err := createConnection()
	if err != nil {
		return ""
	}
	defer db.Close()

	countOfRows := getDataCount(db, data)
	fmt.Printf("count of rows %s\n", countOfRows)

	pag := models.Pagination{}
	pag.SelfLink = getLinkForPagination(host, limit, offset)
	if offset == 0 {
		pag.PrevLink = ""
	} else {
		pag.PrevLink = getLinkForPagination(host, limit, offset-limit)
	}
	if countOfRows > limit+offset {
		pag.NextLink = getLinkForPagination(host, limit, offset+limit)
	} else {
		pag.NextLink = ""
	}
	pagData, _ := json.Marshal(pag)

	query := GetSelectQuery(data, limit, offset)
	rows, err := db.Query(query)
	if err != nil {
		panic(err)
	}

	queryText := `{"data" :[ `
	for rows.Next() {
		var data []byte
		err = rows.Scan(&data)
		if err != nil {
			panic(err)
		}
		queryText += string(data) + ","
	}
	queryText = queryText[:len(queryText)-1] + "]," + "\n \"pagination\" :" + string(pagData) + "}"
	return queryText
}

func getDataCount(db *sql.DB, data models.SelectModel) int {
	query := GetCountQuery(data)
	var count int
	row := db.QueryRow(query)
	err := row.Scan(&count)
	if err != nil {
		log.Fatal(err)
	}

	return count
}

func mergeSelectedData(data models.MergeModel) int64 {
	db, err := createConnection()
	if err != nil {
		panic(err)
	}
	defer db.Close()
	query := GetMergeQuery(data)
	res, err := db.Exec(query)
	if err != nil {
		panic(err)
	}
	rows, err := res.RowsAffected()
	return rows
}

func getMD5(data string) string {
	byteData := []byte(data)
	return fmt.Sprintf("%x", md5.Sum(byteData))
}

func getDataFromFile(filepath string) ([]byte, error) {
	data, err := ioutil.ReadFile(filepath)
	if err != nil {
		return nil, err
	}
	return removeSpacesAndNewLines(data), nil
}

func removeSpacesAndNewLines(data []byte) []byte {
	space := regexp.MustCompile(`\s+`)
	s := space.ReplaceAllString(string(data), " ")
	return []byte(s)
}

func copyDataToTempTable(data []byte, db *sql.DB) error {
	txn, err := db.Begin()
	if err != nil {
		return err
	}
	stmt, err := txn.Prepare(pq.CopyIn("temp", "data"))
	if err != nil {
		return err
	}
	_, err = stmt.Exec(data)
	if err != nil {
		return err
	}
	_, err = stmt.Exec()
	if err != nil {
		return err
	}

	err = stmt.Close()
	if err != nil {
		return err
	}

	err = txn.Commit()
	if err != nil {
		return err
	}

	return nil
}

func insertJSONIntoTable(filePath string, tablename string) (string, error) {
	data, err := getDataFromFile(filePath)
	if err != nil {
		return "", err
	}

	db, err := createConnection()
	if err != nil {
		return "", err
	}
	defer db.Close()

	err = clearTable(db, "temp")
	if err != nil {
		return "", err
	}

	err = copyDataToTempTable(data, db)
	if err != nil {
		return "", err
	}

	err = createTable(tablename, db)
	if err != nil {
		return "", err
	}

	parseQuery := GetQueryForParseJSON(tablename)
	index := strings.Index(string(data), `[`) < strings.Index(string(data), `{`)
	if index {
		parseQuery = GetQueryForParseJSONARRAY(tablename)
	}

	res, err := db.Exec(parseQuery)
	if err != nil {
		return "", err
	}

	_, err = db.Exec(GetQueryForCreatingHash(tablename))
	if err != nil {
		return "", err
	}

	err = os.Remove(filePath)
	if err != nil {
		return "", err
	}

	affected, err := res.RowsAffected()
	if err != nil {
		return "", err
	}
	result := fmt.Sprintf("Inserted %s rows", strconv.FormatInt(affected, 10))

	return result, nil
}

func updateJSONIntoTable(filepath string, targetTable string) (string, error) {
	//To do: temporary file and temporary table to .env
	tempTable := getRandomString()
	_, err := insertJSONIntoTable(filepath, tempTable)

	db, err := createConnection()
	if err != nil {
		return "", err
	}
	defer db.Close()

	res, err := db.Exec(GetQueryForUpdateTable(targetTable, tempTable))
	if err != nil {
		return "", err
	}

	err = dropTable(db, tempTable)
	if err != nil {
		return "", err
	}

	affected, err := res.RowsAffected()
	if err != nil {
		return "", err
	}

	result := fmt.Sprintf("Updated %s rows", strconv.FormatInt(affected, 10))
	return result, nil
}

func getTableList() ([]string, error) {
	db, err := createConnection()
	if err != nil {
		return []string{}, err
	}
	defer db.Close()
	rows, err := db.Query(GetQueryForTableList())
	if err != nil {
		return []string{}, err
	}
	defer rows.Close()

	var tableNames []string

	for rows.Next() {
		var tableName string
		err := rows.Scan(&tableName)
		if err != nil {
			return []string{}, err
		}

		tableNames = append(tableNames, tableName)
	}

	return tableNames, nil
}

func dropTable(db *sql.DB, tableName string) error {
	_, err := db.Exec(GetQueryForDropTable(tableName))
	if err != nil {
		return err
	}
	return nil
}

//TO DO : додати експорт в json/csv
//TO DO : import csv
func getRandomString() string {
	var letterRunes = []rune("abcdefghijklmnopqrstuvwxyz")
	b := make([]rune, 8)
	for i := range b {
		b[i] = letterRunes[rand.Intn(len(letterRunes))]
	}
	return string(b)
}

func clearTable(db *sql.DB, tablename string) error {
	_, err := db.Exec(GetQueryForClearTable(tablename))
	if err != nil {
		return err
	}
	return nil
}
