package middleware

import (
	"database/sql"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"

	"GODAPP/models"

	"github.com/joho/godotenv"
	_ "github.com/lib/pq" //TODO: change to another driver and use sqlx
)

func createConnection() *sql.DB {
	err := godotenv.Load(".env")
	if err != nil {
		log.Fatalf("Error loading .env file")
	}

	db, err := sql.Open("postgres", os.Getenv("POSTGRES_URL"))

	if err != nil {
		panic(err)
	}

	return db
}

func createTable(tableName string, db *sql.DB) {
	query := `CREATE TABLE ` + tableName + ` (
		id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
		data jsonb NOT NULL
	)`
	_, err := db.Exec(query)
	if err != nil {
		panic(err)
	}
}

func copyToTable(path string, tableName string, db *sql.DB) int64 {

	query := `copy ` + tableName + `(data) from ` + path
	res, err := db.Exec(query)
	if err != nil {
		panic(err)
	}
	rows, err := res.RowsAffected()
	if err != nil {
		panic(err)
	}
	return rows
}

func downloadFile(url string, filepath string) error {

	out, err := os.Create(filepath)
	if err != nil {
		return err
	}
	defer out.Close()

	resp, err := http.Get(url)
	if err != nil {
		return err
	}
	defer resp.Body.Close()

	_, err = io.Copy(out, resp.Body)
	if err != nil {
		return err
	}
	return nil
}

func getTableKeys(tableName string) map[string]string {
	db := createConnection()
	query := `
	WITH RECURSIVE doc_key_and_value_recursive(key, value) AS (
		SELECT
		  t.key,
		  t.value
		  FROM ` + tableName + `, jsonb_each(` + tableName + `.data) AS t
	  
		UNION ALL
	  
		SELECT
		  CONCAT(doc_key_and_value_recursive.key, '.', t.key),
		  t.value
		FROM doc_key_and_value_recursive,
		  jsonb_each(
			CASE 
			  WHEN jsonb_typeof(doc_key_and_value_recursive.value) <> 'object' THEN '{}' :: JSONB
			  ELSE doc_key_and_value_recursive.value
			END
			) AS t
	  )
	  SELECT DISTINCT key as key, jsonb_typeof(value) as valuetype
	  FROM doc_key_and_value_recursive
	  WHERE jsonb_typeof(doc_key_and_value_recursive.value) NOT IN ( 'object')   --'array',
	  ORDER BY key`
	rows, err := db.Query(query)
	if err != nil {
		panic(err)
	}
	defer rows.Close()
	data := map[string]string{}
	for rows.Next() {
		var column, columntype string
		err = rows.Scan(&column, &columntype)
		if err != nil {
			panic(err)
		}
		data[column] = columntype
	}
	return data
}

func getSelectData(data models.SelectModel) string {
	db := createConnection()
	defer db.Close()
	query := GetSelectQuery(data, 0, 0)
	rows, err := db.Query(query)
	if err != nil {
		panic(err)
	}
	queryText := `{"data" :[`
	for rows.Next() {
		var data []byte
		err = rows.Scan(&data)
		if err != nil {
			panic(err)
		}
		queryText += string(data) + ","
	}
	queryText = queryText[:len(queryText)-1] + "]}"
	return queryText
}

func getPagedSelectData(data models.SelectModel, host string, limit int, offset int) string {
	pag := models.Pagination{}

	db := createConnection()

	countOfRows := getDataCount(data)
	pag.SelfLink = getLinkForPagination(host, limit, offset)
	if offset == 0 {
		pag.PrevLink = ""
	} else {
		pag.PrevLink = getLinkForPagination(host, limit, offset-limit)
	}
	if countOfRows > limit+offset {
		pag.NextLink = getLinkForPagination(host, limit, offset+limit)
	} else {
		pag.NextLink = ""
	}
	pagData, _ := json.Marshal(pag)

	query := GetSelectQuery(data, limit, offset)

	rows, err := db.Query(query)
	if err != nil {
		fmt.Println(query)
		fmt.Println("fuck")
		panic(err)
	}
	queryText := `{"data" :[`
	for rows.Next() {
		var data []byte
		err = rows.Scan(&data)
		if err != nil {
			panic(err)
		}
		queryText += string(data) + ","
	}
	queryText = queryText[:len(queryText)-1] + "]," + "\n \"pagination:\" " + string(pagData) + "}"
	return queryText
}

func getDataCount(data models.SelectModel) int {
	db := createConnection()
	defer db.Close()
	query := GetCountQuery(data)

	var count int
	row := db.QueryRow(query)
	err := row.Scan(&count)
	if err != nil {
		log.Fatal(err)
	}

	return count
}

func getLinkForPagination(host string, limit int, offset int) string {
	return fmt.Sprintf(`%s/api/get_data&limit={%d}&offset={%d}`, host, limit, offset) //TO DO: привязати ссилку глобально
}

func mergeSelectedData(data models.MergeModel) int64 {
	db := createConnection()
	query := GetMergeQuery(data)
	res, err := db.Exec(query)
	if err != nil {
		panic(err)
	}
	rows, err := res.RowsAffected()
	return rows
}
